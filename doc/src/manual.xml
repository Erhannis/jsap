<manual>
	<chapter number="0">
		<title>
			Introduction
		</title>
		<body>
			<section>
				<title>
					Why do we need another command line parser?
				</title>
				<p>
					Put simply, I got tired of writing simple command line parsers for every java utility program I wrote.  I would usually just throw together something simple, requiring a certain number of arguments and deciding that args[0] would always mean, say, an input file, and args[1] would be an output file.  It was fine for simpler utilities with just a few parameters, but it didn't handle switches - and if I wanted anything other than a String from the command line, I had to write that parsing into the program, too.  What annoyed me was that none of this had anything to do with the actual task for which the utility was intended.
				</p>
				<p>
					I found several parsers on the Internet, all of which handled switches, but none of which had the versatility I wanted in terms of return types and configuration files.  Hence JSAP - the Java Simple Argument Parser.
				</p>
			</section>
			<section>
				<title>
					So what does JSAP actually <i>do</i> then?
				</title>
				<p>
					JSAP not only guarantees that your command line was successfully parsed, but it instantiates objects of types specified by the developer based upon that command line.  If you tell JSAP that one of your parameters is an Integer, for example, and the user does not provide a String that can be converted to an Integer when invoking the program, JSAP will throw a ParseException when you have it parse the command line.  If no exception is thrown, you are guaranteed an Integer when you request that parameter's value from your program.  There's a pretty big (and growing) list of return types suppored by JSAP; you may want to <link target="optionparsers">skip ahead a little and check it out</link>.
				</p>
				<p>
					JSAP provides not only for default values for its parameters, but for an entire <i>chain</i> of defaults.  With a couple extra lines of code, JSAP will, for example:
					<ol>
						<li>Parse the command line.</li>
						<li>For any omitted parameters, look for values in ~/.yourProgramName.conf</li>
						<li>For any <i>still</i> omitted parameters, look for values in /etc/yourProgramName.conf</li>
						<li>For any <i>still</i> omitted parameters, use the default values (if any) specified by the developer.</li>
					</ol>
				</p>
			</section>
		</body>
	</chapter>
	<chapter number="1">
		<title>Up and Running in Five Minutes.  Really.</title>
		<body>
			<section>
				<p>
					This chapter should get you up and running with JSAP very quickly.  It starts out with the most basic functionality
so you can start using it within five minutes.  We'll start with a simple example and gradually build upon 
it in order to demonstrate the various features of JSAP.
				</p>
				<p>
					Everyone else begins with a "Hello, World!" program, so we will, too.  
				</p>
				<example-src id="1" caption='The obligatory "Hello World"'>public class HelloWorld_1 {

	public static void main(String[] args){
		System.out.println("Hello, World!");
	}
}</example-src>
			</section>
		</body>
	</chapter>
	<chapter number="3">
		<title>So long,</title>
	</chapter>
</manual>		
