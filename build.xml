<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 ==========================================================================

 JSAP build file

Author:
 Martin Lamb

Legal:
 Copyright (c) 2002, Martin Lamb All rights reserved.

==============================================================================
 

--> 
<project basedir="." default="help" name="jsap">



	<!-- PROPERTIES ***************************************************************************************** -->

	<!-- Basics -->
   	<property name="name" value="JSAP" />
    <property name="version" value="1.0.beta"/>
    <property name="year" value="2002"/>

	<!-- Directories -->
	<property name="buildfile" value="build.xml"/>
    <property name="src" value="src"/>
    <property name="build" value="build"/>
    <property name="doc" value="doc"/>
    <property name="javadoc" value="${doc}/javadoc"/>
	<property name="javadoc.tmp.src" value="${javadoc}/tmpsrc"/>
    <property name="dist" value="dist"/>
    <property name="lib" value="lib"/>
    <property name="devlib" value="devlib"/>
    <property name="dist.tmp.bin" value="${dist}/tmp-bin"/>
    <property name="dist.tmp.src" value="${dist}/tmp-src"/>

	<!-- Special Files -->
    <property name="testFiles" value="**/Test*" />
    <property name="exampleFiles" value="com/martiansoftware/jsap/examples/" />
    <property name="jarname" value="${name}_${version}.jar" />

	<!-- Administrivia -->
	<property name="url" value="http://www.martiansoftware.com/jsap" />
		
	<property name="author.marty" value="Martin Lamb" />
    <property name="author.marty.html" value="&lt;a href='mailto:marty%20at%20martiansoftware.com'&gt;Martin Lamb&lt;/a&gt;" />
        
    <property name="authors.all" value="${author.marty}" />
    <property name="authors.all.html" value="${author.marty.html}" />
        
    <property name="copyrightowners.all" value="${author.marty}" />
    <property name="copyrightowners.all.html" value="${author.marty.html}" />
        
    <property name="copyright" value="Copyright (c) ${year} ${copyrightowners.all}.  All Rights Reserved." />
    <property name="copyright.html" value="Copyright &amp;copy; ${year}, ${copyrightowners.all.html}.  All Rights Reserved." />

	<property name="updates" value="For the latest version and documentation, please visit ${url}" />
	<property name="updates.html" value="For the latest version and documentation, please visit &lt;a href='${url}'&gt;${url}&lt;/a&gt;" />

	<!-- END OF PROPERTIES ********************************************************************************** -->

	<target name="eclipse-setcompiler" if="eclipse.running">
	    <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter" />
	</target>

    <target name="init" depends="eclipse-setcompiler">

		<!-- Create destination directories if needed. -->
        <mkdir dir="${build}"/>
        <mkdir dir="${javadoc}"/>
        <mkdir dir="${dist}"/>
        
        <!-- Who knows... we might need this for something. -->
        <tstamp/>
        
    </target>

	<path id="devlib.class.path">
		<pathelement location="${devlib}/junit.jar"/>
	</path>

	<path id="lib.class.path">
		<pathelement location="${lib}/ant.jar"/>
	</path>

	<target name="help">
		<echo>

----------------------------------------------------------------------

Targets:

  clean         - delete all intermediate &amp; compiled files
  compile-api   - compiles the JSAP API
  compile-tests - compiles the JSAP API and JUnit test cases
  compile-all	- compiles the JSAP API, JUnit test cases, and examples
  checkstyle    - compiles everything and checks the code style against Sun conventions.
  test          - compiles the JSAP API and tests it
  build         - compiles the JSAP API and builds JSAP.jar
  javadoc       - compiles the JSAP API and generates javadoc documentation
  dist			- compiles the JSAP API, builds the jar file, runs javadoc, and
  				  creates source and binary distribution files.

----------------------------------------------------------------------
		</echo>
	</target>

    <target name="clean" depends="init">
        <delete dir="${build}" verbose="true"/>
        <delete dir="${javadoc}" verbose="true"/>
        <delete dir="${dist}" verbose="true"/>
        <mkdir dir="${build}"/>
        <mkdir dir="${javadoc}"/>
        <mkdir dir="${dist}"/>
    </target>
    
    <target name="compile-api" depends="init" >
        <javac destdir="${build}" srcdir="${src}">
        	<exclude name="${testFiles}" />
        	<exclude name="${exampleFiles}" />
        	<classpath refid="lib.class.path" />
        </javac>
    </target>

    <target name="compile-tests" depends="init" >
        <javac destdir="${build}" srcdir="${src}">
        	<exclude name="${exampleFiles}" />
        	<classpath>
        		<pathelement location="${devlib}/junit.jar"/>
        	</classpath>
        	<classpath refid="lib.class.path" />
        </javac>
        <copy todir="${build}">
    		<fileset dir="${src}">
    			<include name="${testConfFiles}" />
			</fileset>
  		</copy>
    </target>

    <target name="compile-all" depends="init" >
        <javac destdir="${build}" srcdir="${src}">
        	<classpath refid="devlib.class.path" />
        	<classpath refid="lib.class.path" />
        </javac>
    </target>

	<target name="test" depends="compile-tests" >
        <junit printsummary="on">
            <test name="com.martiansoftware.jsap.TestEverything"/>
            <formatter type="plain" usefile="false"/>
            <classpath refid="devlib.class.path" />
            <classpath>
                <pathelement location="${build}"/>
            </classpath>
        </junit>
    </target>

    <target name="build" depends="clean,test">
        <mkdir dir="${dist}"/>
        <jar basedir="${build}" jarfile="${dist}/${jarname}">
        	<exclude name="${testFiles}" />
        	<exclude name="${exampleFiles}" />
        </jar>
    </target> 

    <target name="javadoc" depends="compile-api">
    	<delete dir="${javadoc}"/>
        <mkdir dir="${javadoc}"/>
        <mkdir dir="${javadoc.tmp.src}"/>
        <copy todir="${javadoc.tmp.src}">
    		<fileset dir="${src}">
    			<exclude name="${testFiles}" />
    			<exclude name="${exampleFiles}" />
			</fileset>
  		</copy>
  		
  		<replace dir="${javadoc.tmp.src}" token="@@VERSION@@" value="${version}">
  			<include name="**/*.java"/>
  		</replace>
  		<replace dir="${javadoc.tmp.src}" token="@@AUTHOR_MARTY@@" value="${author.marty.html}">
  			<include name="**/*.java"/>
  		</replace>
  		<replace dir="${javadoc.tmp.src}" token="@@JARNAME@@" value="${jarname}">
  			<include name="**/*.java"/>
  		</replace>

        <javadoc 
        	public="true" 
        	destdir="${javadoc}" 
        	sourcepath="${javadoc.tmp.src}" 
        	packagenames="com.martiansoftware.*"
        	windowtitle="JSAP: the Java Simple Argument Parser" >
        	
			<bottom>${copyright.html}&lt;br&gt;${updates.html}</bottom>
			
        </javadoc>
		<delete dir="${javadoc.tmp.src}" />
    </target>

	<target name="checkstyle" depends="compile-all">
		<checkstyle allowTabs="yes">
			<fileset dir="${src}" includes="**/*.java"/>
		</checkstyle>
	</target>
	
	<target name="xmldocs">
		<!-- I give up.  I can't find a way to get the style task to work here.  If I see
		     the message "Provider org.apache.xerces.jaxp.SAXParserFactoryImpl not found"
		     one more time, I'm going to scream. -->
		     
		<!-- In order for this to work, you need the xercesImpl.jar, xalan.jar, and
		     xml-apis.jar in your classpath.  If you can run "java org.apache.xalan.xslt.Process"
		     (and just get a bunch of usage information), you should be good to go. -->
		     
		<exec executable="java">
			<arg value="org.apache.xalan.xslt.Process" />
			<arg value="-IN" />
			<arg value="${doc}/src/manual.xml" />
			<arg value="-OUT" />
			<arg value="${doc}/manual.html" />
			<arg value="-XSL" />
			<arg value="${doc}/src/manual.xsl" />
		</exec>
	</target>
	
	<target name="dist" depends="build,javadoc">
		<delete dir="${dist.tmp.src}" />
		<mkdir dir="${dist.tmp.src}" />
		<mkdir dir="${dist.tmp.src}/${name}-${version}" />
		<copy todir="${dist.tmp.src}/${name}-${version}" file="${buildfile}" />

		<!-- copy source files into temp directory -->
		<mkdir dir="${dist.tmp.src}/${name}-${version}/${src}"/>
		<copy todir="${dist.tmp.src}/${name}-${version}/${src}">
			<fileset dir="${src}" />
		</copy>

		<!-- copy jar file into temp directory -->
		<mkdir dir="${dist.tmp.src}/${name}-${version}/${lib}"/>
		<copy todir="${dist.tmp.src}/${name}-${version}/${lib}" file="${dist}/${jarname}" />
		
		<!-- copy any libraries required for development into temp directory -->
		<mkdir dir="${dist.tmp.src}/${name}-${version}/${devlib}"/>
		<copy todir="${dist.tmp.src}/${name}-${version}/${devlib}">
			<fileset dir="${devlib}" />
		</copy>
		
		<!-- copy documentation into temp directory -->
		<mkdir dir="${dist.tmp.src}/${name}-${version}/${doc}"/>
		<copy todir="${dist.tmp.src}/${name}-${version}/${doc}">
			<fileset dir="${doc}" />
		</copy>

		<!-- make the source zip file -->
		<zip destfile="${dist}/${name}-${version}-${src}.zip" basedir="${dist.tmp.src}" update="false" />
		
		<!-- delete the buildfile, source files and development libaries from the temp directory. -->
		<!-- the binary distribution file should just contain the jar and the documentation. -->
		<delete file="${dist.tmp.src}/${name}-${version}/${buildfile}" />
		<delete dir="${dist.tmp.src}/${name}-${version}/${src}" />
		<delete dir="${dist.tmp.src}/${name}-${version}/${devlib}" />

		<!-- make the binary zip file -->
		<zip destfile="${dist}/${name}-${version}.zip" basedir="${dist.tmp.src}" update="false" />

<!--		<delete dir="${dist.tmp.src}"/> -->
	</target>

	
</project>
